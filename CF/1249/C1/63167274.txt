#include <bits/stdc++.h>
using namespace std;
// #include <bits/stdtr1c++.h>
// #include <ext/pb_ds/assoc_container.hpp>
// #include <ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;
 
/// Typedef
typedef long long           ll;
typedef unsigned long       ul;
typedef unsigned long long  ull;
typedef vector<int>         vi;
typedef vector<vi>          vvi;
typedef vector<ll>          vl;
typedef vector<vl>          vvl;
typedef pair<int,int>       pii;
typedef pair<ll,ll>         pll;
typedef vector< pii >       vii;
typedef vector< pll >       vll;
 
 
#define pb                  push_back
#define ppb                 pop_back
#define mp                  make_pair
#define ff                  first
#define ss                  second
#define sf                  scanf
#define pf                  printf
#define itr                 iterator
#define SQR(x)              ((x)*(x))
#define loop(i, y)          for(int i=0; i<int(y); i++)
#define FOR(i, x, y)        for(int i=int(x); i<=int(y); i++)
#define ROF(i, y, x)        for(int i=int(y); i>=int(x); i--)
#define ALL(c)              c.begin(), c.end()
#define SZ(c)               int(c.size())
#define CLR(x, y)           memset(x, y, sizeof(x))
#define READ(f)             freopen(f, "r", stdin)
#define WRITE(f)            freopen(f, "w", stdout)
#define si(x)               scanf("%d", &x)
#define sii(x, y)           scanf("%d %d", &x, &y)
#define siii(x, y, z)       scanf("%d %d %d", &x, &y, &z)
#define sl(x)               scanf("%lld", &x)
#define sll(x, y)           scanf("%lld %lld", &x, &y)
#define slll(x, y, z)       scanf("%lld %lld %lld", &x, &y, &z)
#define sllll(a, b, c, d)   scanf("%lld %lld %lld %lld", &a, &b, &c ,&d)
#define FileIO              freopen("input.txt", "r", stdin);   freopen("output.txt", "w", stdout);
#define FastIO              ios::sync_with_stdio(false);cin.tie(0);
#define FixedPrecision(x)   ios::sync_with_stdio(false); cout.setf(ios::fixed); cout.precision(x); cin.tie(0);
#define bitCheck(N,in)      ((bool)(N&(1LL<<(in))))
#define bitOff(N,in)        (N&(~(1LL<<(in))))
#define bitOn(N,in)         (N|(1LL<<(in)))
#define bitFlip(a,k)        (a^(1LL<<(k)))
#define start_time          clock_t tStart = clock();
#define execution_time      printf("\n>>Time taken: %.10fs\n", (double) (clock() - tStart) / CLOCKS_PER_SEC);
#define popCount(x)         __builtin_popcount(x)
#define int2Bin(x, y)       bitset<y> z=x; cout<<z.to_string()<<endl;
#define tr(it, container)   for(auto it = container.begin(); it != container.end(); it++)
#define unq(v)              (v).erase(unique(ALL(v)),v.end())
#define common(a,b)         sort(ALL(a)), sort(ALL(b)), a.erase(set_intersection(ALL(a),ALL(b),a.begin()),a.end())
#define uncommon(a,b)       sort(ALL(a)), sort(ALL(b)), a.erase(set_symmetric_difference(ALL(a),ALL(b),a.begin()),a.end())
#define DB(x)               cout << #x << " = " << x << endl
#define DDB(x,y)            cout << #x << " = " << x << "   " << #y << " = " << y << endl
#define DDDB(x,y,z)         cout << #x << " = " << x << "   " << #y << " = " << y << "   " << #z << " = " << z << endl
/// template <typename T> using orderset = tree <T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;
/// *X.find_by_order(k) //returns the kth largest element.(0-based)
/// X.order_of_key(val) //returns the no. of values less than val
 
/// uniform random generator -->
/// uniform_int_distribution<int> dist(0, 1);
/// default_random_engine gen;
 
template <class T> inline T bigMod(T p,T e,T M){ ll ret = 1; for(; e > 0; e >>= 1){ if(e & 1) ret = (ret * p) % M; p = (p * p) % M; } return (T) ret;}
template <class T> inline T modInverse(T a,T M){return bigMod(a,M-2,M);}
template <class T> inline T gcd(T a,T b){if(b==0)return a;return gcd(b,a%b);}
template <class T> inline T lcm(T a,T b) {a=abs(a);b=abs(b); return (a/gcd(a,b))*b;}
template <class T> inline T diss(T x1,T x2,T y1 , T y2) {return sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2)));}
template <class T> inline T disss(T x1,T x2,T z1 ,T y1 , T y2 , T z2) {return sqrt(((x1-x2)*(x1-x2))+((y1-y2)*(y1-y2))+((z1-z2)*(z1-z2)));}
template <class T> inline string int2String(T a){ostringstream str; str<<a; return str.str();}
template <class T> inline T string2int(string a){stringstream str(a); T b; str>>b; return b;}
const int dr[] = { 0,  1,  0, -1,   -1,  1,  1, -1,   -2, -2,  2,  2, -1, -1,  1,  1};
const int dc[] = { 1,  0, -1,  0,    1,  1, -1, -1,   -1,  1, -1,  1, -2,  2, -2,  2};
 
/// Constants
 
#define MAXN                1000005
#define MAX                 200005
#define MOD                 1000000007
#define BASE                1000000009
#define eps                 1e-9
#define INF                 1llu<<61    // 2,305,843,009,213,693,952
#define inf                 1<<29       // 536,870,912
#define PI                  acos(-1.0)  // 3.1415926535897932
#define E                   2.71828182845904523536


bool is_prime(long long n)
{

    if (n==1)return false;
    for(long long i = 2 ; (i*i) <= n ; i++)if(n%i==0)return false;
        return true;
}


 
 
int main()
{
 
    #ifndef ONLINE_JUDGE
    start_time;
    FileIO;
    #else
    //FastIO;
    #endif
    ll arr[1024] = {1,
4,
13,
40,
121,
364,
1093,
3280,
9841,
29524,
22963,
7654,
27337,
20776,
2551,
9112,
28795,
22234,
6925,
26608,
20047,
850,
3037,
9598,
29281,
22720,
7411,
27094,
20533,
2308,
8869,
28552,
21991,
6682,
26365,
19804,
283,
1012,
3199,
9760,
29443,
22882,
7573,
27256,
20695,
2470,
9031,
28714,
22153,
6844,
26527,
19966,
769,
2956,
9517,
29200,
22639,
7330,
27013,
20452,
2227,
8788,
28471,
21910,
6601,
26284,
19723,
94,
337,
1066,
3253,
9814,
29497,
22936,
7627,
27310,
20749,
2524,
9085,
28768,
22207,
6898,
26581,
20020,
823,
3010,
9571,
29254,
22693,
7384,
27067,
20506,
2281,
8842,
28525,
21964,
6655,
26338,
19777,
256,
985,
3172,
9733,
29416,
22855,
7546,
27229,
20668,
2443,
9004,
28687,
22126,
6817,
26500,
19939,
742,
2929,
9490,
29173,
22612,
7303,
26986,
20425,
2200,
8761,
28444,
21883,
6574,
26257,
19696,
31,
112,
355,
1084,
3271,
9832,
29515,
22954,
7645,
27328,
20767,
2542,
9103,
28786,
22225,
6916,
26599,
20038,
841,
3028,
9589,
29272,
22711,
7402,
27085,
20524,
2299,
8860,
28543,
21982,
6673,
26356,
19795,
274,
1003,
3190,
9751,
29434,
22873,
7564,
27247,
20686,
2461,
9022,
28705,
22144,
6835,
26518,
19957,
760,
2947,
9508,
29191,
22630,
7321,
27004,
20443,
2218,
8779,
28462,
21901,
6592,
26275,
19714,
85,
328,
1057,
3244,
9805,
29488,
22927,
7618,
27301,
20740,
2515,
9076,
28759,
22198,
6889,
26572,
20011,
814,
3001,
9562,
29245,
22684,
7375,
27058,
20497,
2272,
8833,
28516,
21955,
6646,
26329,
19768,
247,
976,
3163,
9724,
29407,
22846,
7537,
27220,
20659,
2434,
8995,
28678,
22117,
6808,
26491,
19930,
733,
2920,
9481,
29164,
22603,
7294,
26977,
20416,
2191,
8752,
28435,
21874,
6565,
26248,
19687,
10,
37,
118,
361,
1090,
3277,
9838,
29521,
22960,
7651,
27334,
20773,
2548,
9109,
28792,
22231,
6922,
26605,
20044,
847,
3034,
9595,
29278,
22717,
7408,
27091,
20530,
2305,
8866,
28549,
21988,
6679,
26362,
19801,
280,
1009,
3196,
9757,
29440,
22879,
7570,
27253,
20692,
2467,
9028,
28711,
22150,
6841,
26524,
19963,
766,
2953,
9514,
29197,
22636,
7327,
27010,
20449,
2224,
8785,
28468,
21907,
6598,
26281,
19720,
91,
334,
1063,
3250,
9811,
29494,
22933,
7624,
27307,
20746,
2521,
9082,
28765,
22204,
6895,
26578,
20017,
820,
3007,
9568,
29251,
22690,
7381,
27064,
20503,
2278,
8839,
28522,
21961,
6652,
26335,
19774,
253,
982,
3169,
9730,
29413,
22852,
7543,
27226,
20665,
2440,
9001,
28684,
22123,
6814,
26497,
19936,
739,
2926,
9487,
29170,
22609,
7300,
26983,
20422,
2197,
8758,
28441,
21880,
6571,
26254,
19693,
28,
109,
352,
1081,
3268,
9829,
29512,
22951,
7642,
27325,
20764,
2539,
9100,
28783,
22222,
6913,
26596,
20035,
838,
3025,
9586,
29269,
22708,
7399,
27082,
20521,
2296,
8857,
28540,
21979,
6670,
26353,
19792,
271,
1000,
3187,
9748,
29431,
22870,
7561,
27244,
20683,
2458,
9019,
28702,
22141,
6832,
26515,
19954,
757,
2944,
9505,
29188,
22627,
7318,
27001,
20440,
2215,
8776,
28459,
21898,
6589,
26272,
19711,
82,
325,
1054,
3241,
9802,
29485,
22924,
7615,
27298,
20737,
2512,
9073,
28756,
22195,
6886,
26569,
20008,
811,
2998,
9559,
29242,
22681,
7372,
27055,
20494,
2269,
8830,
28513,
21952,
6643,
26326,
19765,
244,
973,
3160,
9721,
29404,
22843,
7534,
27217,
20656,
2431,
8992,
28675,
22114,
6805,
26488,
19927,
730,
2917,
9478,
29161,
22600,
7291,
26974,
20413,
2188,
8749,
28432,
21871,
6562,
26245,
19684,
3,
12,
39,
120,
363,
1092,
3279,
9840,
29523,
22962,
7653,
27336,
20775,
2550,
9111,
28794,
22233,
6924,
26607,
20046,
849,
3036,
9597,
29280,
22719,
7410,
27093,
20532,
2307,
8868,
28551,
21990,
6681,
26364,
19803,
282,
1011,
3198,
9759,
29442,
22881,
7572,
27255,
20694,
2469,
9030,
28713,
22152,
6843,
26526,
19965,
768,
2955,
9516,
29199,
22638,
7329,
27012,
20451,
2226,
8787,
28470,
21909,
6600,
26283,
19722,
93,
336,
1065,
3252,
9813,
29496,
22935,
7626,
27309,
20748,
2523,
9084,
28767,
22206,
6897,
26580,
20019,
822,
3009,
9570,
29253,
22692,
7383,
27066,
20505,
2280,
8841,
28524,
21963,
6654,
26337,
19776,
255,
984,
3171,
9732,
29415,
22854,
7545,
27228,
20667,
2442,
9003,
28686,
22125,
6816,
26499,
19938,
741,
2928,
9489,
29172,
22611,
7302,
26985,
20424,
2199,
8760,
28443,
21882,
6573,
26256,
19695,
30,
111,
354,
1083,
3270,
9831,
29514,
22953,
7644,
27327,
20766,
2541,
9102,
28785,
22224,
6915,
26598,
20037,
840,
3027,
9588,
29271,
22710,
7401,
27084,
20523,
2298,
8859,
28542,
21981,
6672,
26355,
19794,
273,
1002,
3189,
9750,
29433,
22872,
7563,
27246,
20685,
2460,
9021,
28704,
22143,
6834,
26517,
19956,
759,
2946,
9507,
29190,
22629,
7320,
27003,
20442,
2217,
8778,
28461,
21900,
6591,
26274,
19713,
84,
327,
1056,
3243,
9804,
29487,
22926,
7617,
27300,
20739,
2514,
9075,
28758,
22197,
6888,
26571,
20010,
813,
3000,
9561,
29244,
22683,
7374,
27057,
20496,
2271,
8832,
28515,
21954,
6645,
26328,
19767,
246,
975,
3162,
9723,
29406,
22845,
7536,
27219,
20658,
2433,
8994,
28677,
22116,
6807,
26490,
19929,
732,
2919,
9480,
29163,
22602,
7293,
26976,
20415,
2190,
8751,
28434,
21873,
6564,
26247,
19686,
9,
36,
117,
360,
1089,
3276,
9837,
29520,
22959,
7650,
27333,
20772,
2547,
9108,
28791,
22230,
6921,
26604,
20043,
846,
3033,
9594,
29277,
22716,
7407,
27090,
20529,
2304,
8865,
28548,
21987,
6678,
26361,
19800,
279,
1008,
3195,
9756,
29439,
22878,
7569,
27252,
20691,
2466,
9027,
28710,
22149,
6840,
26523,
19962,
765,
2952,
9513,
29196,
22635,
7326,
27009,
20448,
2223,
8784,
28467,
21906,
6597,
26280,
19719,
90,
333,
1062,
3249,
9810,
29493,
22932,
7623,
27306,
20745,
2520,
9081,
28764,
22203,
6894,
26577,
20016,
819,
3006,
9567,
29250,
22689,
7380,
27063,
20502,
2277,
8838,
28521,
21960,
6651,
26334,
19773,
252,
981,
3168,
9729,
29412,
22851,
7542,
27225,
20664,
2439,
9000,
28683,
22122,
6813,
26496,
19935,
738,
2925,
9486,
29169,
22608,
7299,
26982,
20421,
2196,
8757,
28440,
21879,
6570,
26253,
19692,
27,
108,
351,
1080,
3267,
9828,
29511,
22950,
7641,
27324,
20763,
2538,
9099,
28782,
22221,
6912,
26595,
20034,
837,
3024,
9585,
29268,
22707,
7398,
27081,
20520,
2295,
8856,
28539,
21978,
6669,
26352,
19791,
270,
999,
3186,
9747,
29430,
22869,
7560,
27243,
20682,
2457,
9018,
28701,
22140,
6831,
26514,
19953,
756,
2943,
9504,
29187,
22626,
7317,
27000,
20439,
2214,
8775,
28458,
21897,
6588,
26271,
19710,
81,
324,
1053,
3240,
9801,
29484,
22923,
7614,
27297,
20736,
2511,
9072,
28755,
22194,
6885,
26568,
20007,
810,
2997,
9558,
29241,
22680,
7371,
27054,
20493,
2268,
8829,
28512,
21951,
6642,
26325,
19764,
243,
972,
3159,
9720,
29403,
22842,
7533,
27216,
20655,
2430,
8991,
28674,
22113,
6804,
26487,
19926,
729,
2916,
9477,
29160,
22599,
7290,
26973,
20412,
2187,
8748,
28431,
21870,
6561,
26244,
19683};
    
    sort(arr,arr+1024);

    vl v(arr,arr+1024);

    ll q ; sl(q);
    while(q--)
    {
        ll n ; sl(n);
        int in = lower_bound(v.begin(),v.end(),n)- v.begin();
        cout <<  v[in] <<endl;
    }

    #ifndef ONLINE_JUDGE
    execution_time;
    #endif
 
 
    return 0;
}